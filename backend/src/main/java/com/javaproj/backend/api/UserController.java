package com.javaproj.backend.api;

import com.alibaba.fastjson.*;
import com.javaproj.backend.config.JsonResult;
import com.javaproj.backend.domain.UserRepository;
import com.javaproj.backend.model.User;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @PostMapping(path="/request") // Map ONLY POST Requests
    public JsonResult<User> addNewUser (@RequestParam String name
            , @RequestParam String email, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
//        User userList = userRepository.findByName(name);
        List<User> userList = userRepository.findAllByName(name);
        if(userList.isEmpty()) {
            JsonResult<User> res = new JsonResult<>("404", "User not found!");
            return res;
        }
        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setPassword(password);
        userRepository.save(n);
        JsonResult<User> res = new JsonResult<>(n);
        return res;
    }

//    @PostMapping(path = "/user/{id}")
//    public @ResponseBody
//    JsonResult<User> modifyUser (@PathVariable Integer id, @RequestParam String name
//    , @RequestParam String email, @RequestParam String password) {
//        userRepository.findById(id).map(user -> {
//            user.setName(name);
//            user.setEmail(email);
//            user.setPassword(password);
//        });
//        return new JsonResult<>(userRepository.findById(id));
//    }

    @GetMapping(path="/all")
    public @ResponseBody String getAllUsers() {
        // This returns a JSON or XML with the users
        return JSON.toJSONString(userRepository.findAll());
    }
}